#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
from itertools import ifilter
from pprint import pprint
from optparse import OptionParser


ROOT='___root___'


class Node(object):
    def __init__(self, name, parent=None, nodetype=None):
        self.name = name
        self.parent = parent
        self.nodetype = nodetype
        self.children = []
        self.__hash = hash(name) + hash(nodetype)

    def addChild(self, child):
        self.children.append(child)

    def __eq__(self, other):
        """
        name と nodetype が一致していれば同一とみなす
        """
        return (self.name     == other.name     and
                self.nodetype == other.nodetype)

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return self.__hash

    @staticmethod
    def jointree(name, parentname, nodetype, roottree):
        if '|' == parentname[0]:
            Node.__jointreeFullPath(name, parentname, nodetype, roottree)
        else:
            Node.__jointreeUnique(name, parentname, nodetype, roottree)

    @classmethod
    def __jointreeUnique(cls, name, parentname, nodetype, tree):
        if tree.name == parentname:
            node = Node(name, tree, nodetype)
            tree.addChild(node)
            return
        for child in tree.children:
            Node.__jointreeUnique(name, parentname, nodetype, child)

    @classmethod
    def __jointreeFullPath(cls, name, parentname, nodetype, tree):
        # parentname == '|root|parent|child' みたいな時の処理
        parents = parentname[1:].split('|')
        tmptree = tree
        for parent in parents:
            tmptree = next(ifilter(lambda x:x.name == parent, tmptree.children), None)
        node = Node(name, tmptree, nodetype)
        tmptree.addChild(node)


class DiffNode(object):

    INTERSECT = 0
    ADD       = 1
    DELETE    = 2

    def __init__(self, name, nodetype=None, difftype=INTERSECT):
        self.name = name
        self.nodetype = nodetype
        self.difftype = difftype
        self.children = []

    def addChild(self, child):
        self.children.append(child)

    def compareStr(self, indent=''):
        res = '{0}{1}{2}({3})\n'.format(self.compareMark(), indent, self.name, self.nodetype)
        for child in sorted(self.children, key=lambda n:n.name):
            res += child.compareStr(indent + '    ')
        return res

    def compareMark(self):
        if self.difftype is DiffNode.INTERSECT:
            return '  '
        elif self.difftype is DiffNode.ADD:
            return '+ '
        elif self.difftype is DiffNode.DELETE:
            return '- '
        else:
            raise Exception('DiffNode: Failed difftype for compareMark.')


def createNodeParser(line):
    """
    'createNode nodetype -n "name" -s -p "parent";\n'
    のような行を解析して、
    (name, parent, nodetype)を返す
    """
    tokens = line[:-2].split()
    nameflag = False
    parentflag = False
    name = ''
    parent = ROOT
    nodetype = tokens[1]
    for token in tokens[2:]:
        if '-n' == token:
            nameflag = True
            continue
        if '-p' == token:
            parentflag = True
            continue
        if nameflag:
            name = token.strip('"')
            nameflag = False
            continue
        if parentflag:
            parent = token.strip('"')
            parentflag = False
            continue
    return (name, parent, nodetype)


def buildNodeTreeFils(path):
    """
    maファイルを読み込み、Nodeクラスによるtreeを作成して返す
    """
    roottree = Node(ROOT)
    try:
        with open(path, 'r') as f:
            line = f.readline()
            while line:
                if 'createNode' == line[:10]:
                    (name, parentname, nodetype) = createNodeParser(line)
                    Node.jointree(name, parentname, nodetype, roottree)
                line = f.readline()
    except IOError:
        raise u'Not allowed to write files to this path "%s".' % path
    return roottree


def nodefilter(lines, whitelist):
    """
    linesのうち、whitelistのどれかが含まれている行だけを返す
    """
    res = []
    for line in lines:
        """
        すべての行を検査する
        """
        for whiteword in whitelist:
            """
            whitelistに入っているどれかが含まれていれば
            resに追加して次のlineへ検査を進める
            """
            if line.find(whiteword) >= 0:
                res.append(line)
                break
    return res


def whitelist_cleaner(whitelist):
    """
    -wの引数なし
    -w hoge
    -w hoge,hogehoge
    という３パターンを考慮して、すべて配列にして返す
    """
    if len(whitelist) is 0:
        return []
    if ',' in whitelist:
        return whitelist.split(',')
    return [whitelist]


def buildDiffNode(treea, treeb, diffnode):
    seta = set(treea)
    setb = set(treeb)
    union = seta.union(setb)
    intersect = seta.intersection(setb)
    difference_a = seta.difference(setb)
    difference_b = setb.difference(seta)
    for node in sorted(union, key=lambda node: node.name):
        if node in intersect:
            newdiff = DiffNode(node.name, node.nodetype, DiffNode.INTERSECT)
        elif node in difference_a:
            newdiff = DiffNode(node.name, node.nodetype, DiffNode.DELETE)
        elif node in difference_b:
            newdiff = DiffNode(node.name, node.nodetype, DiffNode.ADD)
        else:
            raise Exception(u'buildDiffNode: Failed Node({}, {}, {})'.format(node.name, node.parent, node.nodetype))

        a = filter(lambda x:x == node, seta)
        b = filter(lambda x:x == node, setb)
        if a:
            seta.discard(a[0])
            children_a = a[0].children
        else:
            children_a = []
        if b:
            setb.discard(b[0])
            children_b = b[0].children
        else:
            children_b = []

        diffnode.addChild(newdiff)

        buildDiffNode(children_a, children_b, newdiff)


def nodediff(patha, pathb, diffonly=False, whitelist=''):
    if not os.path.exists(patha):
        raise Exception(u'%s is not exists. exit.' % patha)
    if not os.path.exists(pathb):
        raise Exception(u'%s is not exists. exit.' % pathb)

    treea = buildNodeTreeFils(patha)
    treeb = buildNodeTreeFils(pathb)

    diffnode = DiffNode(ROOT)
    buildDiffNode(treea.children, treeb.children, diffnode)
    result = []
    [result.extend(child.compareStr().split('\n')) for child in diffnode.children]

    result = filter(lambda x:len(x) != 0, result)

    whitelist = whitelist_cleaner(whitelist)
    if whitelist:
        result = nodefilter(result, whitelist)

    if diffonly:
        print '\n'.join(filter(lambda x:x[0]!=' ', result))
    else:
        print '\n'.join(result)


if __name__ == '__main__':
    parser = OptionParser(
        prog=__name__,
        description=u'This script require two maya ascii file (.ma). and print diff nodeName and nodeType.',
        usage = u'Usage: $ nodediff [options] file-a.ma file-b.ma'
    )
    parser.add_option(
        '-d', '--diffonly',
        action = 'store_true',
        dest = 'diffonly',
        default = False
    )
    parser.add_option(
        '-w', '--whitelist',
        action = 'store',
        type = 'string',
        dest = 'whitelist',
        default = '',
        help = 'Whitelist nodeType(s). Multi specification ex) \'-w transform,mesh\''
    )
    try:
        (option, args) = parser.parse_args()
        nodediff(
            args[0],
            args[1],
            diffonly=option.diffonly,
            whitelist=option.whitelist
        )
    except:
        parser.print_help()
        print ''
        raise
